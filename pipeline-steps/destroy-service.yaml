parameters:
  environment: ''
  cluster: ''
  location: ''
  component: ''
  project: ''
  tfInitSub: ''
  targetCommand: ''
  builtFrom: ''
  product: ''
  action: ''

steps:

  - task: AzureCLI@2
    displayName: StopStartAksCluster
    name: StopStartAksCluster
    inputs:
      azureSubscription: $(serviceConnection)
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        CLUSTER_NAME=$(echo cft-${{ parameters.environment }}-${{ parameters.cluster }}-aks | sed -e 's/\(.*\)/\L\1/')
        RESOURCE_GROUP_NAME=$(echo cft-${{ parameters.environment }}-${{ parameters.cluster }}-rg | sed -e 's/\(.*\)/\L\1/')
        echo Cluster name is $CLUSTER_NAME and Resource group name is $RESOURCE_GROUP_NAME

        echo Stopping aks cluster has commenced.
        az aks stop --name $CLUSTER_NAME --resource-group $RESOURCE_GROUP_NAME
        echo $? aks stop status.
        sleep 180
        echo Starting aks cluster has commenced.
        az aks start --name $CLUSTER_NAME --resource-group $RESOURCE_GROUP_NAME
        echo $? aks start status.
        sleep 30
        echo Moving on to the Terraform destroy section.

  - template: steps/terraform.yaml@cnp-azuredevops-libraries
    parameters:
      overrideAction: ${{ parameters.action }}
      environment: ${{ parameters.environment }}
      component: ${{ parameters.component }}
      serviceConnection: $(serviceConnection)
      terraformInitSubscription: ${{ variables.tfInitSub }}
      product: ${{ variables.product }}
      initCommandOptions: >
        -backend-config resource_group_name=${{ variables.backendAzureRmResourceGroupName }}
      destroyCommandOptions: >
        -var subscription_id=$(ARM_SUBSCRIPTION_ID)
        -var project=${{ variables.project }}
        -var environment=${{ parameters.environment }}
        -var control_vault=$(controlKeyVault)
        -lock=false
