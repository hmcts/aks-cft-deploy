parameters:
  environment: ''
  cluster: ''
  location: ''
  stack: ''
  project: ''
  tfInitSub: ''
  targetCommand: ''
  builtFrom: ''
  product: ''

steps:
  - template: keyvault-read.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      environment: ${{ parameters.environment }}

  - task: AzureCLI@2
    displayName: StopAksCluster
    name: StopAksCluster
    inputs:
      azureSubscription: $(serviceConnection)
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        CLUSTER_NAME='echo cft-${{ parameters.environment }}-${{ parameters.cluster }}-aks'
        RESOURCE_GROUP_NAME='echo cft-${{ parameters.environment }}-${{ parameters.cluster }}-rg'
        CLUSTER_LC=$(echo "$CLUSTER_NAME | tr '[:upper:]' '[:lower:]' | cut -d" " -f2)
        RESOURCE_LC=$(echo "$RESOURCE_GROUP_NAME" | tr '[:upper:]' '[:lower:]' | cut -d" " -f2)
        echo Cluster name is $CLUSTER_LC and Resource group name is $RESOURCE_LC

        # az aks stop --name $CLUSTER_LC --resource-group $RESOURCE_LC

  # - task: TerraformCLI@0
  #   displayName: Terraform init
  #   inputs:
  #         command: init
  #         workingDirectory: '$(System.DefaultWorkingDirectory)/components/${{ parameters.stack }}'
  #         backendType: azurerm
  #         backendServiceArm: $(serviceconnection)
  #         ${{ if eq( parameters['environment'], 'perftest') }}: 
  #           backendAzureRmResourceGroupName: 'azure-control-test-rg'
  #         ${{ if eq( parameters['environment'], 'preview') }}: 
  #           backendAzureRmResourceGroupName: 'azure-control-dev-rg'
  #         ${{ if eq( parameters['environment'], 'aat') }}: 
  #           backendAzureRmResourceGroupName: 'azure-control-stg-rg'
  #         ${{ if eq( parameters['environment'], 'ptlsbox') }}: 
  #           backendAzureRmResourceGroupName: 'azure-control-sbox-rg'
  #         ${{ if eq( parameters['environment'], 'ptl') }}: 
  #           backendAzureRmResourceGroupName: 'azure-control-prod-rg'
  #         ${{ if notIn( parameters['environment'], 'aat', 'perftest', 'ptlsbox', 'ptl', 'preview') }}: 
  #           backendAzureRmResourceGroupName: 'azure-control-${{ parameters.environment }}-rg'
  #         backendAzureRmResourceGroupLocation: ${{ parameters.location }}
  #         backendAzureRmStorageAccountName: $(controlStorageAccount)
  #         backendAzureRmStorageAccountSku: Standard_LRS
  #         backendAzureRmContainerName: subscription-tfstate
  #         backendAzureRmKey: '${{ parameters.location }}/${{ parameters.project }}/$(env)/${{ parameters.stack }}/terraform.tfstate'
  #         commandOptions: '-backend-config=subscription_id=${{ parameters.tfInitSub }} -var builtFrom=${{ parameters.builtFrom }} -var product=${{ parameters.product }}'

  # - task: TerraformCLI@0
  #   displayName: Terraform validate
  #   inputs:
  #         command: validate
  #         workingDirectory: $(System.DefaultWorkingDirectory)/components/${{ parameters.stack }}

  # - task: TerraformCLI@0
  #   displayName: Terraform destroy
  #   condition: and(succeeded(), eq(variables['action'], 'Destroy'))
  #   inputs:
  #     command: destroy
  #     workingDirectory: $(System.DefaultWorkingDirectory)/components/${{ parameters.stack }}
  #     environmentServiceName: $(serviceconnection)
  #     commandOptions: '-var control_vault=$(controlKeyVault) -var environment=$(env) -var builtFrom=${{ parameters.builtFrom }} -var product=${{ parameters.product }} -var project=$(project) -var-file $(System.DefaultWorkingDirectory)/environments/${{ parameters.stack }}/$(env).tfvars ${{ parameters.targetCommand }}'
