name: AKS-CFT-Deploy - ${{ parameters.action }}

trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - "refs/heads/main"

pool:
  vmImage: "ubuntu-latest"

resources:
  repositories:
    - repository: cnp-azuredevops-libraries
      type: github
      ref: master
      name: hmcts/cnp-azuredevops-libraries
      endpoint: "hmcts"
    - repository: cnp-flux-config
      type: github
      ref: refs/heads/master
      name: hmcts/cnp-flux-config
      endpoint: "hmcts"

parameters:
  - name: action
    displayName: Action
    type: string
    default: "plan"
    values:
      - plan
      - apply

  - name: cluster
    displayName: Cluster
    type: string
    default: "All"
    values:
      - "All"
      - "00"
      - "01"

  - name: location
    displayName: Location
    type: string
    default: "UK South"
    values:
      - "UK South"

  - name: environment_components
    type: object
    default:
      - env: "sbox"
        serviceConnection: "DCD-CFTAPPS-SBOX"
        backendAzureRmResourceGroupName: "azure-control-sbox-rg"
        aksKeyVault: "dcdcftappssboxkv"
        terraformSubscriptionID: "b72ab7b7-723f-4b18-b6f6-03b0f2c6a1bb"
      - env: "preview"
        dependsOn: "sbox"
        serviceConnection: "DCD-CFTAPPS-DEV"
        backendAzureRmResourceGroupName: "azure-control-dev-rg"
        aksKeyVault: "dcdcftappsdevkv"
        terraformSubscriptionID: "8b6ea922-0862-443e-af15-6056e1c9b9a4"
      - env: "demo"
        dependsOn: "sbox"
        serviceConnection: "DCD-CFTAPPS-DEMO"
        backendAzureRmResourceGroupName: "azure-control-demo-rg"
        aksKeyVault: "dcdcftappsdemokv"
        terraformSubscriptionID: "d025fece-ce99-4df2-b7a9-b649d3ff2060"
      - env: "ithc"
        dependsOn: "sbox"
        serviceConnection: "DCD-CFTAPPS-ITHC"
        backendAzureRmResourceGroupName: "azure-control-ithc-rg"
        aksKeyVault: "dcdcftappsithckv"
        terraformSubscriptionID: "62864d44-5da9-4ae9-89e7-0cf33942fa09"
      - env: "ptlsbox"
        dependsOn: "sbox"
        serviceConnection: "DTS-CFTSBOX-INTSVC"
        backendAzureRmResourceGroupName: "azure-control-ptlsbox-rg"
        aksKeyVault: "dtscftptlsbox"
        terraformSubscriptionID: "1497c3d7-ab6d-4bb7-8a10-b51d03189ee3"
      - env: "perftest"
        dependsOn: "sbox"
        serviceConnection: "DCD-CFTAPPS-TEST"
        backendAzureRmResourceGroupName: "azure-control-test-rg"
        aksKeyVault: "dcdcftappstestkv"
        terraformSubscriptionID: "8a07fdcd-6abd-48b3-ad88-ff737a4b9e3c"
      - env: "aat"
        dependsOn: "sbox"
        serviceConnection: "DCD-CFTAPPS-STG"
        backendAzureRmResourceGroupName: "azure-control-stg-rg"
        aksKeyVault: "dcdcftappsstgkv"
        terraformSubscriptionID: "96c274ce-846d-4e48-89a7-d528432298a7"
      - env: "ptl"
        dependsOn: "ptlsbox"
        serviceConnection: "DTS-CFTPTL-INTSVC"
        backendAzureRmResourceGroupName: "azure-control-ptl-rg"
        aksKeyVault: "dtscftptl"
        terraformSubscriptionID: "1baf5470-1c3e-40d3-a6f7-74bfbce4b348"
      - env: "prod"
        dependsOn: "aat"
        serviceConnection: "DCD-CFTAPPS-PROD"
        backendAzureRmResourceGroupName: "azure-control-prod-rg"
        aksKeyVault: "dcdcftappsprodkv"
        terraformSubscriptionID: "8cbc6f36-7c56-4963-9d36-739db5d00b27"

variables:
  - name: project
    value: cft
  - name: timeoutInMinutes
    value: "60"
  - name: agentPool
    value: "ubuntu-20.04"
  - name: tfInitSub
    value: "04d27a32-7a07-48b3-95b8-3c8691e1a263"
  - name: isMain
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  - name: product
    value: "cft-platform"
  - name: action
    value: ${{ parameters.action }}

stages:
  - stage: PreCheck
    displayName: "PreChecks"
    jobs:
      - job: PreChecks
        steps:
          - template: steps/terraform-precheck.yaml@cnp-azuredevops-libraries
            parameters:
              keyvaultName: infra-vault-nonprod
              keyvaultSecret: "azure-devops-sp-token"
              serviceConnection: azurerm-sandbox
              projectName: ${{ variables.project }}
              cluster: ${{ parameters.cluster }}
              environment: sbox
              runManualStart: true
  - ${{ each component in parameters.environment_components }}:
      - stage: "CheckingClusters_${{ component.env }}"
        displayName: "Checking Clusters for ${{ component.env }}"
        dependsOn:
          - ${{ if ne(component.env, 'sbox') }}:
              - "Network_${{ component.dependsOn }}"
              - "Managed_Identity_${{ component.dependsOn }}"
              - "Aks_${{ component.dependsOn }}"
              - "PipelineTests_${{ component.dependsOn }}"
              - "BootStrapClusters_${{ component.dependsOn }}"
          - ${{ else }}:
              - "Precheck"
        jobs:
          - job: CheckingClusters
            steps:
              - checkout: self
              - task: AzureCLI@2
                displayName: "Checking available clusters"
                inputs:
                  scriptType: bash
                  azureSubscription: ${{ component.serviceConnection }}
                  scriptPath: "scripts/checking-clusters.sh"
                name: check_clusters
              - script: |
                  echo "Cluster output: $(check_clusters.cluster_deploy)"
                displayName: "Print cluster output"
                name: set_cluster_output
              - script: |
                  echo "Cluster Parameter: ${{ parameters.cluster }}"
                  if [ "${{ parameters.cluster }}" = "$(check_clusters.cluster_deploy)" ]; then
                      echo "Input matches cluster"
                  else
                      echo "Input does not match cluster"
                  fi
                displayName: "Print cluster parameter and output"
                name: compare_cluster_and_output

      - stage: "Genesis_${{ component.env }}"
        displayName: "${{ upper(component.env) }}: Genesis"
        condition: ne('${{ parameters.Action }}', 'Destroy')
        dependsOn:
          - "CheckingClusters_${{ component.env }}"
        jobs:
          - job: Genesis
            steps:
              - template: steps/terraform.yaml@cnp-azuredevops-libraries
                parameters:
                  overrideAction: ${{ parameters.action }}
                  environment: ${{ component.env }}
                  component: "genesis"
                  location: ${{ parameters.location }}
                  serviceConnection: ${{ component.serviceConnection }}
                  terraformInitSubscription: ${{ variables.tfInitSub }}
                  product: ${{ variables.product }}
                  tfVarsFile: NULL
                  initCommandOptions: >
                    -var subscription_id=${{ component.terraformSubscriptionID }}
                    -backend-config resource_group_name=${{ component.backendAzureRmResourceGroupName }}
                  planCommandOptions: >
                    -var subscription_id=${{ component.terraformSubscriptionID }}

      - stage: "Network_${{ component.env }}"
        displayName: "${{ upper(component.env) }}: Network"
        dependsOn:
          - "CheckingClusters_${{ component.env }}"
        jobs:
          - job: NetworkRg
            steps:
              - template: steps/set-build-repo-suffix-env-var.yaml@cnp-azuredevops-libraries
              - template: steps/terraform.yaml@cnp-azuredevops-libraries
                parameters:
                  overrideAction: ${{ parameters.action }}
                  environment: ${{ component.env }}
                  component: "network-rg"
                  location: ${{ parameters.location }}
                  serviceConnection: ${{ component.serviceConnection }}
                  terraformInitSubscription: ${{ variables.tfInitSub }}
                  product: ${{ variables.product }}
                  tfVarsFile: "$(System.DefaultWorkingDirectory)/$(buildRepoSuffix)/environments/network-rg/${{ component.env }}.tfvars"
                  initCommandOptions: >
                    -var subscription_id=${{ component.terraformSubscriptionID }}
                    -backend-config resource_group_name=${{ component.backendAzureRmResourceGroupName }}
                  planCommandOptions: >
                    -var subscription_id=${{ component.terraformSubscriptionID }}
                    -var control_vault=$(controlKeyVault)
                    -var project=$(project)

          - job: DeployInfrastructure
            dependsOn: NetworkRg
            steps:
              - template: steps/set-build-repo-suffix-env-var.yaml@cnp-azuredevops-libraries
              - template: steps/keyvault-read.yaml@cnp-azuredevops-libraries
                parameters:
                  serviceConnection: ${{ component.serviceConnection }}
                  environment: ${{ component.env }}
                  subscriptionIdVariableName: "SUBSCRIPTION_ID"
                  storageAccountVariableName: "STORAGE_ACCOUNT"
                  keyVaultVariableName: "KEY_VAULT"

              - template: steps/terraform.yaml@cnp-azuredevops-libraries
                parameters:
                  overrideAction: ${{ parameters.action }}
                  environment: ${{ component.env }}
                  component: "network"
                  location: ${{ parameters.location }}
                  serviceConnection: OPS-APPROVAL-GATE-MGMT-ENVS
                  terraformInitSubscription: ${{ variables.tfInitSub }}
                  product: ${{ variables.product }}
                  tfVarsFile: "$(System.DefaultWorkingDirectory)/$(buildRepoSuffix)/environments/network/${{ component.env }}.tfvars"
                  initCommandOptions: >
                    -var subscription_id=${{ component.terraformSubscriptionID }}
                    -backend-config resource_group_name=${{ component.backendAzureRmResourceGroupName }}
                    -backend-config storage_account_name=$(STORAGE_ACCOUNT)
                  planCommandOptions: >
                    -var subscription_id=${{ component.terraformSubscriptionID }}
                    -var control_vault=$(KEY_VAULT)
                    -var project=$(project)


      - stage: "Managed_Identity_${{ component.env }}"
        displayName: "${{ upper(component.env) }}: Managed_Identity"
        dependsOn:
          - "Network_${{ component.env }}"
        jobs:
          - job: Managed_Identity
            steps:
              - template: steps/terraform.yaml@cnp-azuredevops-libraries
                parameters:
                  overrideAction: ${{ parameters.action }}
                  environment: ${{ component.env }}
                  component: managed-identity
                  location: ${{ parameters.location }}
                  serviceConnection: ${{ component.serviceConnection }}
                  terraformInitSubscription: ${{ variables.tfInitSub }}
                  product: ${{ variables.product }}
                  tfVarsFile: "$(System.DefaultWorkingDirectory)/$(buildRepoSuffix)/environments/managed-identity/${{ component.env }}.tfvars"
                  initCommandOptions: >
                    -var subscription_id=${{ component.terraformSubscriptionID }}
                    -backend-config resource_group_name=${{ component.backendAzureRmResourceGroupName }}
                  planCommandOptions: >
                    -var subscription_id=${{ component.terraformSubscriptionID }}
                    -var control_vault=$(controlKeyVault)
                    -var project=$(project)

      - stage: "Aks_${{ component.env }}"
        displayName: "${{ upper(component.env) }}: AKS clusters"
        dependsOn:
          - "Managed_Identity_${{ component.env }}"
        variables:
          existing_clusters: $[stageDependencies.CheckingClusters_${{ component.env }}.CheckingClusters.outputs['check_clusters.cluster_deploy']]
          deploy_cluster: ${{ parameters.cluster }}
        condition: |
          or(
            and(eq('${{ parameters.cluster }}', 'All'), eq(variables['Build.Reason'], 'Manual')),
            and(eq(dependencies.CheckingClusters_${{ component.env }}.outputs['CheckingClusters.check_clusters.cluster_deploy'], 'All'), eq(variables['Build.Reason'], 'Manual')),
            and(succeeded(), eq(variables['isAutoTriggered'], true), eq(variables['Build.Reason'], 'PullRequest')),
            and(succeeded(), eq(variables['isMain'], true), eq(variables['isAutoTriggered'], true))
          )
        jobs:
          - job: debug
            steps:
              - script: |
                  echo "Existing clusters: $(existing_clusters)"
                  echo "Deploy cluster: $(deploy_cluster)"
                displayName: "Debug"
          - job: DeployInfrastructure
            steps:
              - template: pipeline-steps/deploy-service.yaml
                parameters:
                  environment: ${{ component.env }}
                  location: ${{ parameters.location }}
                  stack: "aks"
                  project: $(project)
                  product: ${{ variables.product }}
                  tfInitSub: ${{ variables.tfInitSub }}
                  serviceConnection: ${{ component.serviceConnection }}
                  action: ${{ parameters.action }}
                  terraformSubscriptionID: ${{ component.terraformSubscriptionID }}
                  backendAzureRmResourceGroupName: ${{ component.backendAzureRmResourceGroupName }}
                  setClusterNumbersEnvVar: true
                  ${{ if ne(parameters['cluster'], 'All') }}:
                    targetCommand: >
                      -target azurerm_resource_group.kubernetes_resource_group["\"${{parameters.cluster}}\""]
                      -target module.kubernetes["\"${{parameters.cluster}}\""]

          - job: "DeployInfrastructuremis"
            dependsOn: DeployInfrastructure
            steps:
              - template: pipeline-steps/deploy-service.yaml
                parameters:
                  environment: ${{ component.env }}
                  location: ${{ parameters.location }}
                  stack: "aks-mis"
                  project: $(project)
                  tfInitSub: ${{ variables.tfInitSub }}
                  serviceConnection: ${{ component.serviceConnection }}
                  action: ${{ parameters.action }}
                  setClusterNumbersEnvVar: false
                  terraformSubscriptionID: ${{ component.terraformSubscriptionID }}
                  backendAzureRmResourceGroupName: ${{ component.backendAzureRmResourceGroupName }}
                  ${{ if ne(parameters['cluster'], 'All') }}:
                    targetCommand: >
                      -target azurerm_role_assignment.uami_cft_rg_identity_operator["\"${{parameters.cluster}}\""]
                      -target azurerm_role_assignment.preview_externaldns_read_rg["\"${{parameters.cluster}}\""]
                      -target azurerm_role_assignment.preview_externaldns_dns_zone_contributor["\"${{parameters.cluster}}\""]
                      -target azurerm_role_assignment.preview2aat_cft_rg_identity_operator["\"${{parameters.cluster}}\""]
                      -target data.azurerm_kubernetes_cluster.kubernetes["\"${{parameters.cluster}}\""]

      - stage: "BootStrapClusters_${{ component.env }}"
        displayName: "${{ upper(component.env) }}: BootStrap Clusters"
        dependsOn:
          - "Aks_${{ component.env }}"
        variables:
          existing_clusters: $[stageDependencies.CheckingClusters_${{ component.env }}.CheckingClusters.outputs['check_clusters.cluster_deploy']]
          deploy_cluster: ${{ parameters.cluster }}
        condition: |
          or(
            and(eq('${{ parameters.cluster }}', 'All'), eq(variables['Build.Reason'], 'Manual')),
            and(eq(dependencies.CheckingClusters_${{ component.env }}.outputs['CheckingClusters.check_clusters.cluster_deploy'], 'All'), eq(variables['Build.Reason'], 'Manual')),
            and(eq(dependencies.CheckingClusters_${{ component.env }}.outputs['CheckingClusters.check_clusters.cluster_deploy'], '${{ parameters.cluster }}'), eq(variables['Build.Reason'], 'Manual')),
            and(succeeded(), eq(variables['isAutoTriggered'], true), eq(variables['Build.Reason'], 'PullRequest')),
            and(succeeded(), eq(variables['isMain'], true), eq(variables['isAutoTriggered'], true))
          )
        jobs:
          - job: BootStrap
            condition: and(succeeded(), eq('${{ parameters.action }}', 'apply'))
            steps:
              - template: pipeline-steps/bootstrap.yaml
                parameters:
                  environment: ${{ component.env }}
                  cluster: ${{ parameters.cluster }}
                  project: $(project)
                  serviceConnection: ${{ component.serviceConnection }}
                  aksKeyVault: ${{ component.aksKeyVault }}
                  terraformSubscriptionID: ${{ component.terraformSubscriptionID }}

      - stage: "PipelineTests_${{ component.env }}"
        displayName: "${{ upper(component.env) }}: PipelineTests"
        dependsOn:
          - "BootStrapClusters_${{ component.env }}"
        jobs:
          - job: PipelineTests
            pool:
              vmImage: ${{ variables.agentPool }}
            timeoutInMinutes: ${{ variables.timeoutInMinutes }}
            condition: |
              or(
                and(succeeded(), eq('${{ parameters.action }}', 'apply')),
                and(succeeded(), eq(variables['isMain'], true), eq(variables['isAutoTriggered'], true))
              )
            steps:
              - template: steps/pipeline-tests-jest.yaml@cnp-azuredevops-libraries
                parameters:
                  workingDirectory: $(Pipeline.Workspace)/s/aks-cft-deploy/scripts
                  junit_output_dir: $(Pipeline.Workspace)/s/aks-cft-deploy/environments/junit
                  environment: ${{ component.env }}
                  product: ${{ variables.product }}
                  test_title: "${{ component.env }}_${{ parameters.cluster }}_${{ parameters.location }}"
                  test_pattern: pipeline.test.ts
