name: "${{ parameters.action }} - ${{ parameters.env }}.${{ parameters.cluster }}.${{ parameters.location }}"

trigger: none

pool:
  vmImage: 'ubuntu-latest'

resources:
  repositories:
    - repository: cnp-azuredevops-libraries
      type: github
      ref: master
      name: hmcts/cnp-azuredevops-libraries
      endpoint: 'hmcts'

parameters:

  - name: action
    displayName: Action
    type: string
    default: 'plan'
    values:
    - plan
    - apply

  - name: cluster
    displayName: Cluster
    type: string
    default: '01'
    values:
    - 'All'
    - '00'
    - '01'

  - name: location
    displayName: Location
    type: string
    default: 'UK South'
    values:
    - 'UK South'
    - 'UK West'

  - name: env
    displayName: Environment
    type: string
    default: 'sbox'
    values:
    - ithc
    - preview
    - demo
    - sbox
    - perftest
    - aat
    - ptlsbox
    - ptl
    - prod

variables:
  - name: project
    value: cft
  - name: serviceConnection
    ${{ if eq( parameters['env'], 'perftest') }}: 
      value: "OPS-APPROVAL-GATE-TEST-ENVS"
    ${{ if eq( parameters['env'], 'preview') }}: 
      value: "OPS-APPROVAL-GATE-DEV-ENVS"
    ${{ if eq( parameters['env'], 'aat' ) }}: 
      value: "OPS-APPROVAL-GATE-STG-ENVS"
    ${{ if eq( parameters['env'], 'ptlsbox' ) }}: 
      value: "DTS-CFTSBOX-INTSVC"
    ${{ if eq( parameters['env'], 'ptl' ) }}: 
      value: "DTS-CFTPTL-INTSVC"
    ${{ if notIn( parameters['env'], 'aat', 'perftest', 'ptlsbox', 'preview', 'ptl') }}: 
      value: "OPS-APPROVAL-GATE-${{ parameters.env }}-ENVS"
  - name: tfInitSub
    value: "04d27a32-7a07-48b3-95b8-3c8691e1a263"
  - name: isMain
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  - name: product
    value: 'cft-platform'
  - name: action
    value: ${{ parameters.action }}
  - name: backendAzureRmResourceGroupName
    ${{ if eq( parameters['env'], 'perftest') }}:
      value: 'azure-control-test-rg'
    ${{ if eq( parameters['env'], 'preview') }}:
      value: 'azure-control-dev-rg'
    ${{ if eq( parameters['env'], 'aat') }}:
      value: 'azure-control-stg-rg'
    ${{ if eq( parameters['env'], 'ptlsbox') }}:
      value: 'azure-control-sbox-rg'
    ${{ if notIn( parameters['env'], 'aat', 'perftest', 'ptlsbox', 'preview') }}:
      value: 'azure-control-${{ parameters.env }}-rg'
  - name: aksKeyVault
    ${{ if eq( parameters['env'], 'perftest') }}:
      value: "dcdcftappstestkv"
    ${{ if eq( parameters['env'], 'aat' ) }}:
      value: "dcdcftappsstgkv"
    ${{ if eq( parameters['env'], 'ptlsbox' ) }}:
      value: "dtscftptlsbox"
    ${{ if eq( parameters['env'], 'ptl' ) }}:
      value: "dtscftptl"
    ${{ if eq( parameters['env'], 'preview' ) }}:
      value: "dcdcftappsdevkv"
    ${{ if notIn( parameters['env'], 'aat', 'perftest', 'ptlsbox', 'ptl', 'preview') }}:
      value: dcdcftapps${{ parameters.env }}kv

stages:

  - stage: PreChecks
    displayName: 'PreChecks'
    jobs:
      - job: PreChecks
        steps:
          - template: pipeline-steps/terraform-precheck.yaml
            parameters:
              keyvaultName: infra-vault-nonprod
              keyvaultSecret: 'azure-devops-token'
              serviceConnection: azurerm-sandbox

  - stage: Genesis
    displayName: 'Genesis'
    condition: ne('${{ parameters.Action }}', 'Destroy')
    jobs:
      - job: Genesis
        steps:
          - template: steps/terraform.yaml@cnp-azuredevops-libraries
            parameters:
              overrideAction: ${{ parameters.action }}
              environment: ${{ parameters.env }}
              component: 'genesis'
              location: ${{ parameters.location }}
              serviceConnection: $(serviceConnection)
              terraformInitSubscription: ${{ variables.tfInitSub }}
              product: ${{ variables.product }}
              tfVarsFile: NULL
              initCommandOptions: >
                -var subscription_id=$(ARM_SUBSCRIPTION_ID)
                -backend-config resource_group_name=$(backendAzureRmResourceGroupName)
              planCommandOptions: >
                -var subscription_id=$(ARM_SUBSCRIPTION_ID)

  - stage: Network
    displayName: 'Network'
    jobs:
      - job: NetworkRg
        steps:
          - template: steps/set-build-repo-suffix-env-var.yaml@cnp-azuredevops-libraries
          - template: steps/terraform.yaml@cnp-azuredevops-libraries
            parameters:
              overrideAction: ${{ parameters.action }}
              environment: ${{ parameters.env }}
              component: 'network-rg'
              location: ${{ parameters.location }}
              serviceConnection: $(serviceConnection)
              terraformInitSubscription: ${{ variables.tfInitSub }}
              product: ${{ variables.product }}
              tfVarsFile: "$(System.DefaultWorkingDirectory)/$(buildRepoSuffix)/environments/network-rg/${{ parameters.env }}.tfvars"
              initCommandOptions: >
                -var subscription_id=$(ARM_SUBSCRIPTION_ID)
                -backend-config resource_group_name=$(backendAzureRmResourceGroupName)
              planCommandOptions: >
                -var control_vault=$(controlKeyVault)
                -var project=$(project)

      - job: DeployInfrastructure
        dependsOn: NetworkRg
        steps:
          - template: steps/set-build-repo-suffix-env-var.yaml@cnp-azuredevops-libraries

          - template: steps/keyvault-read.yaml@cnp-azuredevops-libraries
            parameters:
              serviceConnection: $(serviceConnection)
              environment: ${{ parameters.env }}
              subscriptionIdVariableName: 'SUBSCRIPTION_ID'
              storageAccountVariableName: 'STORAGE_ACCOUNT'
              keyVaultVariableName: 'KEY_VAULT'

          - template: steps/terraform.yaml@cnp-azuredevops-libraries
            parameters:
              overrideAction: ${{ parameters.action }}
              environment: ${{ parameters.env }}
              component: 'network'
              location: ${{ parameters.location }}
              serviceConnection: OPS-APPROVAL-GATE-MGMT-ENVS-CNP
              terraformInitSubscription: ${{ variables.tfInitSub }}
              product: ${{ variables.product }}
              tfVarsFile: "$(System.DefaultWorkingDirectory)/$(buildRepoSuffix)/environments/network/${{ parameters.env }}.tfvars"
              initCommandOptions: >
                -var subscription_id=$(SUBSCRIPTION_ID)
                -backend-config resource_group_name=$(backendAzureRmResourceGroupName)
                -backend-config storage_account_name=$(STORAGE_ACCOUNT)
              planCommandOptions: >
                -var subscription_id=$(SUBSCRIPTION_ID)
                -var control_vault=$(KEY_VAULT)
                -var project=$(project)

  - stage: Managed_Identity
    displayName: 'Managed_Identity'
    dependsOn: Network
    jobs:
      - job: Managed_Identity
        steps:
          - template: steps/terraform.yaml@cnp-azuredevops-libraries
            parameters:
              overrideAction: ${{ parameters.action }}
              environment: ${{ parameters.env }}
              component: managed-identity
              location: ${{ parameters.location }}
              serviceConnection: $(serviceConnection)
              terraformInitSubscription: ${{ variables.tfInitSub }}
              product: ${{ variables.product }}
              tfVarsFile: NULL
              initCommandOptions: >
                -var subscription_id=$(ARM_SUBSCRIPTION_ID)
                -backend-config resource_group_name=$(backendAzureRmResourceGroupName)
              planCommandOptions: >
                -var subscription_id=$(ARM_SUBSCRIPTION_ID)
                -var control_vault=$(controlKeyVault)
                -var project=$(project)

  - stage: Aks
    displayName: 'Deploy AKS clusters'
    dependsOn:
      - Managed_Identity
    jobs:
      - job: DeployInfrastructure
        steps:
          - template: pipeline-steps/deploy-service.yaml
            parameters:
              environment: ${{ parameters.env }}
              location: ${{ parameters.location }}
              stack: 'aks'
              project: $(project)
              product: ${{ variables.product }}
              tfInitSub: ${{ variables.tfInitSub }}
              serviceConnection: $(serviceConnection)
              action: ${{ parameters.action }}
              setClusterNumbersEnvVar: true
              ${{ if ne(parameters['cluster'], 'All') }}:
                targetCommand: >
                  -target azurerm_resource_group.kubernetes_resource_group[${{parameters.cluster}}]
                  -target module.kubernetes[${{parameters.cluster}}]

      - job: DeployInfrastructuremis
        dependsOn: DeployInfrastructure
        steps:
          - template: pipeline-steps/deploy-service.yaml
            parameters:
              environment: ${{ parameters.env }}
              location: ${{ parameters.location }}
              stack: 'aks-mis'
              project: $(project)
              tfInitSub: ${{ variables.tfInitSub }}
              serviceConnection: $(serviceConnection)
              action: ${{ parameters.action }}
              setClusterNumbersEnvVar: false
              ${{ if ne(parameters['cluster'], 'All') }}:
                targetCommand: >
                  -target azurerm_role_assignment.uami_cft_rg_identity_operator[${{parameters.cluster}}]
                  -target azurerm_role_assignment.preview_externaldns_read_rg[${{parameters.cluster}}]
                  -target azurerm_role_assignment.preview_externaldns_dns_zone_contributor[${{parameters.cluster}}]
                  -target azurerm_role_assignment.preview1aat_cft_rg_identity_operator[${{parameters.cluster}}]
                  -target azurerm_role_assignment.preview2aat_cft_rg_identity_operator[${{parameters.cluster}}]
                  -target data.azurerm_kubernetes_cluster.kubernetes[${{parameters.cluster}}]

  - stage: BootStrapClusters
    displayName: 'BootStrap Clusters'
    dependsOn: Aks
    jobs:
      - job: BootStrap
        variables:
          ${{ if eq(parameters['cluster'], 'All') }}:
            clusters: $[ stageDependencies.Aks.DeployInfrastructure.outputs['setClusterNumbers.clusterNumbers'] ]
          ${{ if ne(parameters['cluster'], 'All') }}:
            clusters: ${{ parameters.cluster }}
        steps:
          - template: pipeline-steps/bootstrap.yaml
            parameters:
              environment: ${{ parameters.env }}
              project: $(project)
              serviceConnection: $(serviceConnection)
              aksKeyVault: $(aksKeyVault)
              GenerateSealedSecrets: false
