name: HMCTS CFT AKS Azure Infrastructure Deployment Pipeline

trigger: none

parameters:

  - name: Action
    displayName: Action
    type: string
    default: 'Plan'
    values:
    - Plan
    - Apply
    - Destroy

  - name: cluster
    displayName: Cluster
    type: string
    default: 'All'
    values:
    - 'All'
    - '00'
    - '01'

  - name: location
    displayName: Location
    type: string
    default: 'UK South'
    values:
    - 'UK South'
    - 'UK West'

  - name: env
    displayName: Environment
    type: string
    default: 'SBOX'
    values:
    # - ITHC
    # - DEV
    # - DEMO
    - SBOX
    - TEST
    # - STG
    # - PROD

variables:
  - name: tfversion
    value: 0.15.1
  - name: project
    value: cft
  - name: serviceConnection
    value: OPS-APPROVAL-GATE-${{ parameters.env }}-ENVS
  - name: tfInitSub
    value: "04d27a32-7a07-48b3-95b8-3c8691e1a263"
  - name: isMain
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  - name: product
    value: 'cft-platform'
  - name: action
    value: ${{ parameters.Action }}

stages:

  - stage: PreChecks
    displayName: 'PreChecks'
    jobs:
      - job: PreChecks
        steps:
          - template: pipeline-steps/terraform-precheck.yaml
            parameters:
              keyvaultName: infra-vault-nonprod
              keyvaultSecret: 'azure-devops-token'
              serviceConnection: azurerm-sandbox

  # - stage: Genesis
  #   displayName: 'Genesis'
  #   # condition: contains('${{ parameters.Run_Stage }}', 'All')
  #   jobs:
  #     - job: Genesis
  #       steps:
  #         - template: pipeline-steps/genesis.yaml
  #           parameters:
  #             environment: ${{ parameters.env }}
  #             location: ${{ parameters.location }}
  #             stack: '00-genesis'
  #             project: $(project)
  #             tfversion: $(tfversion)
  #             tfInitSub: ${{ variables.tfInitSub }}
  #             builtFrom: $(Build.Repository.Name)
  #             product: ${{ variables.product }}

  # - stage: Network
  #   displayName: 'Network'
  #   # condition: contains('${{ parameters.Run_Stage }}', 'All')
  #   jobs:
  #     - job: NetworkRg
  #       steps:
  #         - template: pipeline-steps/deploy-service.yaml
  #           parameters:
  #             environment: ${{ parameters.env }}
  #             location: ${{ parameters.location }}
  #             stack: '07-network-rg'
  #             project: $(project)
  #             tfversion: $(tfversion)
  #             tfInitSub: ${{ variables.tfInitSub }}
  #             builtFrom: $(Build.Repository.Name)
  #             product: ${{ variables.product }}
  #     - job: DeployInfrastructure
  #       dependsOn: NetworkRg
  #       steps:
  #         - template: pipeline-steps/deploy-network.yaml
  #           parameters:
  #             environment: ${{ parameters.env }}
  #             location: ${{ parameters.location }}
  #             stack: '01-network'
  #             project: $(project)
  #             tfversion: $(tfversion)
  #             terraformServiceConnection: OPS-APPROVAL-GATE-MGMT-ENVS-CNP #OPS-APPROVAL-GATE-MGMT-ENVS
  #             tfInitSub: ${{ variables.tfInitSub }}
  #             builtFrom: $(Build.Repository.Name)
  #             product: ${{ variables.product }}

  # - stage: Managed_Identity
  #   displayName: 'Managed_Identity'
  #   # condition: contains('${{ parameters.Run_Stage }}', 'All')
  #   dependsOn: Network
  #   jobs:
  #     - job: Managed_Identity
  #       steps:
  #         - template: pipeline-steps/managed_identity.yaml
  #           parameters:
  #             serviceConnection: $(serviceConnection)
  #             environment: ${{ parameters.env }}
  #             location: ${{ parameters.location }}
  #             stack: managed-identity
  #             project: $(project)
  #             tfversion: $(tfversion)
  #             tfInitSub: ${{ variables.tfInitSub }}
  #             builtFrom: $(Build.Repository.Name)
  #             product: ${{ variables.product }}

  - stage: Aks
    displayName: 'Deploy AKS clusters'
    # dependsOn:
    #   - Managed_Identity
    jobs:
      - job: DeployInfrastructure
        steps:
          - template: pipeline-steps/deploy-service.yaml
            parameters:
              environment: ${{ parameters.env }}
              location: ${{ parameters.location }}
              stack: 'aks'
              project: $(project)
              tfversion: $(tfversion)
              tfInitSub: ${{ variables.tfInitSub }}
              builtFrom: $(Build.Repository.Name)
              product: ${{ variables.product }}
              ${{ if ne(parameters['cluster'], 'All') }}:
                targetCommand: "-target azurerm_resource_group.kubernetes_resource_group[${{parameters.cluster}}] -target module.kubernetes[${{parameters.cluster}}]"

  # - stage: Aks01
  #   displayName: 'Deploy AKS 01'
  #   condition: or(contains('${{ parameters.Run_Stage }}', 'Deploy_Full'), contains('${{ parameters.Run_Stage }}', 'DeployAks01'))
  #   variables:
  #     armClientSecret: $[ stageDependencies.ReadKeyVault.ReadKeyVault.outputs['SetSubscriptionSP.ARM_CLIENT_SECRET'] ]
  #     controlStorageAccount: $[ stageDependencies.ReadKeyVault.ReadKeyVault.outputs['SetControlVars.controlStorageAccount'] ]
  #   dependsOn:
  #     - Managed_Identity
  #   jobs:
  #     - job: DeployInfrastructure
  #       steps:
  #         - template: pipeline-steps/deploy-service.yaml
  #           parameters:
  #             environment: ${{ parameters.env }}
  #             location: ${{ parameters.location }}
  #             stack: '04-aks01'
  #             project: $(project)
  #             tfversion: $(tfversion)
  #             tfInitSub: ${{ variables.tfInitSub }}

  # - stage: BootStrapCluster00
  #   displayName: 'BootStrap Cluster 00'
  #   condition: or(contains('${{ parameters.Run_Stage }}', 'Deploy_Full'), contains('${{ parameters.Run_Stage }}', 'DeployAks00'), contains('${{ parameters.Run_Stage }}', 'BootstrapAks00'))
  #   # dependsOn: Aks00
  #   jobs:
  #     - job: BootStrap
  #       steps:
  #         - template: pipeline-steps/bootstrap.yaml
  #           parameters:
  #             environment: ${{ parameters.env }}
  #             command: $(command)
  #             clusterName: '00'
              # project: $(project)
              # serviceConnection: $(serviceConnection)
              # akskeyvault: dcdcftapps${{ parameters.env }}kv
              # GenerateSealedSecrets: false

  - stage: BootStrapClusters
    displayName: 'BootStrap Clusters'
    dependsOn: Aks
    jobs:
      - job: BootStrap
        variables:
          ${{ if eq(parameters['cluster'], 'All') }}:
            clusters: $[ stageDependencies.Aks.DeployInfrastructure.outputs['setClusterNumbers.clusterNumbers'] ]
          ${{ if ne(parameters['cluster'], 'All') }}:
            clusters: ${{ parameters.cluster }}
        steps:
          - template: pipeline-steps/bootstrap.yaml
            parameters:
              environment: ${{ parameters.env }}
              project: $(project)
              serviceConnection: $(serviceConnection)
              akskeyvault: dcdcftapps${{ parameters.env }}kv
              GenerateSealedSecrets: false
              command: $(command)

  # - stage: DestroyAks00
  #   displayName: 'Destroy AKS 00 Infrastructure'
  #   condition: contains('${{ parameters.Run_Stage }}', 'DestroyAks00')
  #   jobs:
  #     - job: DestroyInfrastructure
  #       steps:
  #         - template: pipeline-steps/destroy-service.yaml
  #           parameters:
  #             environment: ${{ parameters.env }}
  #             location: ${{ parameters.location }}
  #             stack: '03-aks00'
  #             project: $(project)
  #             tfversion: $(tfversion)
  #             tfInitSub: ${{ variables.tfInitSub }}
  #             builtFrom: $(Build.Repository.Name)
  #             product: ${{ variables.product }}

  - stage: DestroyAks
    displayName: 'Destroy AKS Infrastructure'
    condition: contains('${{ parameters.Action }}', 'Destroy')
    jobs:
      - job: DestroyInfrastructure
        steps:
          - template: pipeline-steps/destroy-service.yaml
            parameters:
              environment: ${{ parameters.env }}
              location: ${{ parameters.location }}
              stack: 'aks'
              project: $(project)
              tfversion: $(tfversion)
              tfInitSub: ${{ variables.tfInitSub }}
              ${{ if ne(parameters['cluster'], 'All') }}:
                targetCommand: "-target azurerm_resource_group.kubernetes_resource_group[${{parameters.cluster}}] -target module.kubernetes[${{parameters.cluster}}]"
              builtFrom: $(Build.Repository.Name)
              product: ${{ variables.product }}