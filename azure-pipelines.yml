# name: "HMCTS CFT AKS - branch: $(SourceBranchName) - action: ${{ parameters.action }} - env: ${{ parameters.env }} - cluster: ${{ parameters.cluster }} - location: ${{ parameters.location }}"
name: "${{ parameters.action }} - ${{ parameters.env }}.${{ parameters.cluster }}.${{ parameters.location }}"

trigger: none

pool:
  vmImage: 'ubuntu-latest'

resources:
  repositories:
    - repository: cnp-azuredevops-libraries
      type: github
      ref: refs/heads/master
      name: hmcts/cnp-azuredevops-libraries
      endpoint: 'hmcts'

variables:
  - name: project
    value: cft
  - name: agentPool
    value: 'ubuntu-latest'
  - name: serviceConnection
    ${{ if eq( parameters['env'], 'perftest') }}:
      value: "OPS-APPROVAL-GATE-TEST-ENVS"
    ${{ if eq( parameters['env'], 'preview') }}:
      value: "OPS-APPROVAL-GATE-DEV-ENVS"
    ${{ if eq( parameters['env'], 'aat' ) }}:
      value: "OPS-APPROVAL-GATE-STG-ENVS"
    ${{ if eq( parameters['env'], 'ptlsbox' ) }}:
      value: "DTS-CFTSBOX-INTSVC"
    ${{ if eq( parameters['env'], 'ptl' ) }}:
      value: "DTS-CFTPTL-INTSVC"
    ${{ if notIn( parameters['env'], 'aat', 'perftest', 'ptlsbox', 'preview', 'ptl') }}:
      value: "OPS-APPROVAL-GATE-${{ parameters.env }}-ENVS"
  - name: tfInitSub
    value: "04d27a32-7a07-48b3-95b8-3c8691e1a263"
  - name: isMain
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  - name: product
    value: 'cft-platform'
  - name: action
    value: ${{ parameters.action }}


parameters:

  - name: action
    displayName: Action
    type: string
    default: 'plan'
    values:
    - plan
    - apply
    - destroy

  - name: cluster
    displayName: Cluster
    type: string
    default: '01'
    values:
    - 'All'
    - '00'
    - '01'

  - name: location
    displayName: Location
    type: string
    default: 'UK South'
    values:
    - 'UK South'
    - 'UK West'

  - name: env
    displayName: Environment
    type: string
    default: 'sbox'
    values:
    - ithc
    - preview
    - demo
    - sbox
    - perftest
    - aat
    - ptlsbox
    - ptl
    - prod

  - name: environment_components
    type: object
    default:
      - deployment: 'sbox_genesis'
        environment: 'sbox'
        component: 'genesis'
        dependsOn:
          - Precheck

      - deployment: 'sbox_network_rg'
        environment: 'sbox'
        component: 'network-rg'
        dependsOn:
          - sbox_genesis

      - deployment: 'sbox_network'
        environment: 'sbox'
        component: 'network'
        dependsOn:
          - sbox_network_rg

      - deployment: 'sbox_managed_identity'
        environment: 'sbox'
        component: 'managed-identity'
        dependsOn:
          - sbox_network

      - deployment: 'sbox_aks'
        environment: 'sbox'
        component: 'aks'
        dependsOn:
          - sbox_managed_identity

      - deployment: 'sbox_aks_mis'
        environment: 'sbox'
        component: 'aks-mis'
        dependsOn:
          - sbox_aks


      - deployment: 'ithc_genesis'
        environment: 'ithc'
        component: 'genesis'
        dependsOn:
          - Precheck

      - deployment: 'ithc_network_rg'
        environment: 'ithc'
        component: 'network-rg'
        dependsOn:
          - ithc_genesis

      - deployment: 'ithc_network'
        environment: 'ithc'
        component: 'network'
        dependsOn:
          - ithc_network_rg

      - deployment: 'ithc_managed_identity'
        environment: 'ithc'
        component: 'managed-identity'
        dependsOn:
          - ithc_network

      - deployment: 'ithc_aks'
        environment: 'ithc'
        component: 'aks'
        dependsOn:
          - ithc_managed_identity

      - deployment: 'ithc_aks_mis'
        environment: 'ithc'
        component: 'aks-mis'
        dependsOn:
          - ithc_aks


      - deployment: 'preview_genesis'
        environment: 'preview'
        component: 'genesis'
        dependsOn:
          - Precheck

      - deployment: 'preview_network_rg'
        environment: 'preview'
        component: 'network-rg'
        dependsOn:
          - preview_genesis

      - deployment: 'preview_network'
        environment: 'preview'
        component: 'network'
        dependsOn:
          - preview_network_rg

      - deployment: 'preview_managed_identity'
        environment: 'preview'
        component: 'managed-identity'
        dependsOn:
          - preview_network

      - deployment: 'preview_aks'
        environment: 'preview'
        component: 'aks'
        dependsOn:
          - preview_managed_identity

      - deployment: 'preview_aks_mis'
        environment: 'preview'
        component: 'aks-mis'
        dependsOn:
          - preview_aks


      - deployment: 'demo_genesis'
        environment: 'demo'
        component: 'genesis'
        dependsOn:
          - Precheck

      - deployment: 'demo_network_rg'
        environment: 'demo'
        component: 'network-rg'
        dependsOn:
          - demo_genesis

      - deployment: 'demo_network'
        environment: 'demo'
        component: 'network'
        dependsOn:
          - demo_network_rg

      - deployment: 'demo_managed_identity'
        environment: 'demo'
        component: 'managed-identity'
        dependsOn:
          - demo_network

      - deployment: 'demo_aks'
        environment: 'demo'
        component: 'aks'
        dependsOn:
          - demo_managed_identity

      - deployment: 'demo_aks_mis'
        environment: 'demo'
        component: 'aks-mis'
        dependsOn:
          - demo_aks


      - deployment: 'perftest_genesis'
        environment: 'perftest'
        component: 'genesis'
        dependsOn:
          - Precheck

      - deployment: 'perftest_network_rg'
        environment: 'perftest'
        component: 'network-rg'
        dependsOn:
          - perftest_genesis

      - deployment: 'perftest_network'
        environment: 'perftest'
        component: 'network'
        dependsOn:
          - perftest_network_rg

      - deployment: 'perftest_managed_identity'
        environment: 'perftest'
        component: 'managed-identity'
        dependsOn:
          - perftest_network

      - deployment: 'perftest_aks'
        environment: 'perftest'
        component: 'aks'
        dependsOn:
          - perftest_managed_identity

      - deployment: 'perftest_aks_mis'
        environment: 'perftest'
        component: 'aks-mis'
        dependsOn:
          - perftest_aks


      - deployment: 'aat_genesis'
        environment: 'aat'
        component: 'genesis'
        dependsOn:
          - Precheck

      - deployment: 'aat_network_rg'
        environment: 'aat'
        component: 'network-rg'
        dependsOn:
          - aat_genesis

      - deployment: 'aat_network'
        environment: 'aat'
        component: 'network'
        dependsOn:
          - aat_network_rg

      - deployment: 'aat_managed_identity'
        environment: 'aat'
        component: 'managed-identity'
        dependsOn:
          - aat_network

      - deployment: 'aat_aks'
        environment: 'aat'
        component: 'aks'
        dependsOn:
          - aat_managed_identity

      - deployment: 'aat_aks_mis'
        environment: 'aat'
        component: 'aks-mis'
        dependsOn:
          - aat_aks


      - deployment: 'ptlsbox_genesis'
        environment: 'ptlsbox'
        component: 'genesis'
        dependsOn:
          - Precheck

      - deployment: 'ptlsbox_network_rg'
        environment: 'ptlsbox'
        component: 'network-rg'
        dependsOn:
          - ptlsbox_genesis

      - deployment: 'ptlsbox_network'
        environment: 'ptlsbox'
        component: 'network'
        dependsOn:
          - ptlsbox_network_rg

      - deployment: 'ptlsbox_managed_identity'
        environment: 'ptlsbox'
        component: 'managed-identity'
        dependsOn:
          - ptlsbox_network

      - deployment: 'ptlsbox_aks'
        environment: 'ptlsbox'
        component: 'aks'
        dependsOn:
          - ptlsbox_managed_identity

      - deployment: 'ptlsbox_aks_mis'
        environment: 'ptlsbox'
        component: 'aks-mis'
        dependsOn:
          - ptlsbox_aks


      - deployment: 'ptl_genesis'
        environment: 'ptl'
        component: 'genesis'
        dependsOn:
          - Precheck

      - deployment: 'ptl_network_rg'
        environment: 'ptl'
        component: 'network-rg'
        dependsOn:
          - ptl_genesis

      - deployment: 'ptl_network'
        environment: 'ptl'
        component: 'network'
        dependsOn:
          - ptl_network_rg

      - deployment: 'ptl_managed_identity'
        environment: 'ptl'
        component: 'managed-identity'
        dependsOn:
          - ptl_network

      - deployment: 'ptl_aks'
        environment: 'ptl'
        component: 'aks'
        dependsOn:
          - ptl_managed_identity

      - deployment: 'ptl_aks_mis'
        environment: 'ptl'
        component: 'aks-mis'
        dependsOn:
          - ptl_aks


      - deployment: 'prod_genesis'
        environment: 'prod'
        component: 'genesis'
        dependsOn:
          - Precheck

      - deployment: 'prod_network_rg'
        environment: 'prod'
        component: 'network-rg'
        dependsOn:
          - prod_genesis

      - deployment: 'prod_network'
        environment: 'prod'
        component: 'network'
        dependsOn:
          - prod_network_rg

      - deployment: 'prod_managed_identity'
        environment: 'prod'
        component: 'managed-identity'
        dependsOn:
          - prod_network

      - deployment: 'prod_aks'
        environment: 'prod'
        component: 'aks'
        dependsOn:
          - prod_managed_identity

      - deployment: 'prod_aks_mis'
        environment: 'prod'
        component: 'aks-mis'
        dependsOn:
          - prod_aks

stages:

  - stage: Precheck
    jobs:
      - job: Precheck
        steps:
          - bash: |
              env | sort
            displayName: Print Environment Variables
          - template: steps/terraform-precheck.yaml@cnp-azuredevops-libraries
            parameters:
              keyvaultName: infra-vault-nonprod
              keyvaultSecret: 'azure-devops-token'
              serviceConnection: azurerm-sandbox

  - ${{ each deployment in parameters.environment_components }}:
    - ${{ if and(eq(parameters.env, deployment.environment), ne('${{ parameters.action }}', 'destroy')) }}:
      - stage: ${{ deployment.deployment }}
        dependsOn: ${{ deployment.dependsOn }}
        condition: succeeded()
        jobs:
          - job: TerraformPlanApply
            pool:
              vmImage: ${{ variables.agentPool }}
            steps:
              - template: steps/terraform.yaml@cnp-azuredevops-libraries
                parameters:
                  overrideAction: ${{ parameters.action }}
                  environment: ${{ deployment.environment }}
                  component: ${{ deployment.component }}
                  serviceConnection: $(serviceConnection)
                  terraformInitSubscription: ${{ variables.tfInitSub }}
                  product: ${{ variables.product }}
                  planCommandOptions: >
                    -var subscription_id=$(ARM_SUBSCRIPTION_ID)
                    -var project=${{ variables.project }}
                    -var environment=${{ deployment.environment }}
                    -var control_vault=$(controlKeyVault)
                    -lock=false
                  destroyCommandOptions: >
                    -var subscription_id=$(ARM_SUBSCRIPTION_ID)
                    -var project=${{ variables.project }}
                    -var environment=${{ deployment.environment }}
                    -var control_vault=$(controlKeyVault)
                    -lock=false

  - ${{ if ne('${{ parameters.action }}', 'destroy') }}:
    - stage: ${{ parameters.env }}_bootstrap_cluster
      dependsOn: ${{ parameters.env }}_aks
      jobs:
        - job: BootStrap
          variables:
            ${{ if eq(parameters['cluster'], 'All') }}:
              clusters: $[ stageDependencies.Aks.DeployInfrastructure.outputs['setClusterNumbers.clusterNumbers'] ]
            ${{ if ne(parameters['cluster'], 'All') }}:
              clusters: ${{ parameters.cluster }}
          steps:
            - template: pipeline-steps/bootstrap.yaml
              parameters:
                environment: ${{ parameters.env }}
                project: $(project)
                serviceConnection: $(serviceConnection)
                ${{ if eq( parameters['env'], 'perftest') }}:
                  akskeyvault: "dcdcftappstestkv"
                ${{ if eq( parameters['env'], 'aat' ) }}:
                  akskeyvault: "dcdcftappsstgkv"
                ${{ if eq( parameters['env'], 'ptlsbox' ) }}:
                  akskeyvault: "dtscftptlsbox"
                ${{ if eq( parameters['env'], 'ptl' ) }}:
                  akskeyvault: "dtscftptl"
                ${{ if eq( parameters['env'], 'preview' ) }}:
                  akskeyvault: "dcdcftappsdevkv"
                ${{ if notIn( parameters['env'], 'aat', 'perftest', 'ptlsbox', 'ptl', 'preview') }}:
                  akskeyvault: dcdcftapps${{ parameters.env }}kv
                GenerateSealedSecrets: false

  - ${{ if eq('${{ parameters.action }}', 'destroy') }}:
    - stage: DestroyAks
      displayName: 'Destroy AKS Infrastructure'
      jobs:
        - job: DestroyInfrastructure
          steps:
            - template: pipeline-steps/destroy-service.yaml
              parameters:
                environment: ${{ parameters.env }}
                cluster: ${{ parameters.cluster }}
                location: ${{ parameters.location }}
                stack: 'aks'
                project: $(project)
                tfversion: $(tfversion)
                tfInitSub: ${{ variables.tfInitSub }}
                builtFrom: $(Build.Repository.Name)
                product: ${{ variables.product }}
                ${{ or(eq( parameters['env'], 'ptl'), eq( parameters['env'], 'ptlsbox')) }}:
                  targetCommand: "-target module.kubernetes[00]"
                ${{ if ne(parameters['cluster'], 'All') }}:
                  targetCommand: "-target module.kubernetes[${{parameters.cluster}}]"


#
#  - stage: Genesis
#    displayName: 'Genesis'
#    condition: ne('${{ parameters.action }}', 'Destroy')
#    jobs:
#      - job: Genesis
#        steps:
#          - template: pipeline-steps/genesis.yaml
#            parameters:
#              environment: ${{ parameters.env }}
#              location: ${{ parameters.location }}
#              stack: 'genesis'
#              project: $(project)
#              tfversion: $(tfversion)
#              tfInitSub: ${{ variables.tfInitSub }}
#              builtFrom: $(Build.Repository.Name)
#              product: ${{ variables.product }}
#
#  - stage: Network
#    displayName: 'Network'
#    condition: ne('${{ parameters.action }}', 'Destroy')
#    jobs:
#      - job: NetworkRg
#        steps:
#          - template: pipeline-steps/deploy-service.yaml
#            parameters:
#              environment: ${{ parameters.env }}
#              location: ${{ parameters.location }}
#              stack: 'network-rg'
#              project: $(project)
#              tfversion: $(tfversion)
#              tfInitSub: ${{ variables.tfInitSub }}
#              builtFrom: $(Build.Repository.Name)
#              product: ${{ variables.product }}
#      - job: DeployInfrastructure
#        dependsOn: NetworkRg
#        steps:
#          - template: pipeline-steps/deploy-network.yaml
#            parameters:
#              environment: ${{ parameters.env }}
#              location: ${{ parameters.location }}
#              stack: 'network'
#              project: $(project)
#              tfversion: $(tfversion)
#              terraformServiceConnection: OPS-APPROVAL-GATE-MGMT-ENVS-CNP #OPS-APPROVAL-GATE-MGMT-ENVS
#              tfInitSub: ${{ variables.tfInitSub }}
#              builtFrom: $(Build.Repository.Name)
#              product: ${{ variables.product }}
#
#  - stage: Managed_Identity
#    displayName: 'Managed_Identity'
#    condition: ne('${{ parameters.action }}', 'Destroy')
#    dependsOn: Network
#    jobs:
#      - job: Managed_Identity
#        steps:
#          - template: pipeline-steps/managed_identity.yaml
#            parameters:
#              serviceConnection: $(serviceConnection)
#              environment: ${{ parameters.env }}
#              location: ${{ parameters.location }}
#              stack: 'managed-identity'
#              project: $(project)
#              tfversion: $(tfversion)
#              tfInitSub: ${{ variables.tfInitSub }}
#              builtFrom: $(Build.Repository.Name)
#              product: ${{ variables.product }}
#
#  - stage: Aks
#    displayName: 'Deploy AKS clusters'
#    condition: ne('${{ parameters.action }}', 'Destroy')
#    dependsOn:
#      - Managed_Identity
#    jobs:
#      - job: DeployInfrastructure
#        steps:
#          - template: pipeline-steps/deploy-service.yaml
#            parameters:
#              environment: ${{ parameters.env }}
#              location: ${{ parameters.location }}
#              stack: 'aks'
#              project: $(project)
#              tfversion: $(tfversion)
#              tfInitSub: ${{ variables.tfInitSub }}
#              builtFrom: $(Build.Repository.Name)
#              product: ${{ variables.product }}
#              ${{ if ne(parameters['cluster'], 'All') }}:
#                targetCommand: "-target azurerm_resource_group.kubernetes_resource_group[${{parameters.cluster}}] -target module.kubernetes[${{parameters.cluster}}]"
#      - job: DeployInfrastructuremis
#        dependsOn: DeployInfrastructure
#        steps:
#          - template: pipeline-steps/deploy-service.yaml
#            parameters:
#              environment: ${{ parameters.env }}
#              location: ${{ parameters.location }}
#              stack: 'aks-mis'
#              project: $(project)
#              tfversion: $(tfversion)
#              tfInitSub: ${{ variables.tfInitSub }}
#              builtFrom: $(Build.Repository.Name)
#              product: ${{ variables.product }}
#              ${{ if ne(parameters['cluster'], 'All') }}:
#                targetCommand: "-target azurerm_role_assignment.uami_cft_rg_identity_operator[${{parameters.cluster}}] -target azurerm_role_assignment.preview_externaldns_read_rg[${{parameters.cluster}}] -target azurerm_role_assignment.preview_externaldns_dns_zone_contributor[${{parameters.cluster}}] -target azurerm_role_assignment.preview1aat_cft_rg_identity_operator[${{parameters.cluster}}] -target azurerm_role_assignment.preview2aat_cft_rg_identity_operator[${{parameters.cluster}}] -target data.azurerm_kubernetes_cluster.kubernetes[${{parameters.cluster}}]"
#
#  - stage: BootStrapClusters
#    displayName: 'BootStrap Clusters'
#    dependsOn: Aks
#    jobs:
#      - job: BootStrap
#        variables:
#          ${{ if eq(parameters['cluster'], 'All') }}:
#            clusters: $[ stageDependencies.Aks.DeployInfrastructure.outputs['setClusterNumbers.clusterNumbers'] ]
#          ${{ if ne(parameters['cluster'], 'All') }}:
#            clusters: ${{ parameters.cluster }}
#        steps:
#          - template: pipeline-steps/bootstrap.yaml
#            parameters:
#              environment: ${{ parameters.env }}
#              project: $(project)
#              serviceConnection: $(serviceConnection)
#              ${{ if eq( parameters['env'], 'perftest') }}:
#                akskeyvault: "dcdcftappstestkv"
#              ${{ if eq( parameters['env'], 'aat' ) }}:
#                akskeyvault: "dcdcftappsstgkv"
#              ${{ if eq( parameters['env'], 'ptlsbox' ) }}:
#                akskeyvault: "dtscftptlsbox"
#              ${{ if eq( parameters['env'], 'ptl' ) }}:
#                akskeyvault: "dtscftptl"
#              ${{ if eq( parameters['env'], 'preview' ) }}:
#                akskeyvault: "dcdcftappsdevkv"
#              ${{ if notIn( parameters['env'], 'aat', 'perftest', 'ptlsbox', 'ptl', 'preview') }}:
#                akskeyvault: dcdcftapps${{ parameters.env }}kv
#              GenerateSealedSecrets: false
#
#  - stage: DestroyAks
#    displayName: 'Destroy AKS Infrastructure'
#    condition: contains('${{ parameters.action }}', 'Destroy')
#    jobs:
#      - job: DestroyInfrastructure
#        steps:
#          - template: pipeline-steps/destroy-service.yaml
#            parameters:
#              environment: ${{ parameters.env }}
#              cluster: ${{ parameters.cluster }}
#              location: ${{ parameters.location }}
#              stack: 'aks'
#              project: $(project)
#              tfversion: $(tfversion)
#              tfInitSub: ${{ variables.tfInitSub }}
#              builtFrom: $(Build.Repository.Name)
#              product: ${{ variables.product }}
#              ${{ or(eq( parameters['env'], 'ptl'), eq( parameters['env'], 'ptlsbox')) }}:
#                targetCommand: "-target module.kubernetes[00]"
#              ${{ if ne(parameters['cluster'], 'All') }}:
#                targetCommand: "-target module.kubernetes[${{parameters.cluster}}]"
